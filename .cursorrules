# AIMC 项目规则 - MineDojo AI Minecraft 训练工程

## 1. 目录结构
```
src/              # 源代码: agents/, models/, utils/, training/
scripts/          # 脚本: run_*.sh, diagnose_*.py (需chmod +x)
docs/             # 文档: 大写下划线命名，如INSTALLATION_GUIDE.md
logs/             # 日志: 按模块/类别分类
config/           # 配置文件
data/             # 数据: raw/, processed/
checkpoints/      # 模型检查点
tests/            # 测试: test_*.py
```

## 2. 命名规范
- **Python文件/函数**: 小写下划线 `my_module.py`, `def train_model()`
- **类名**: 驼峰命名 `class MyAgent`
- **文档**: 大写下划线 `TECHNICAL_GUIDE.md`
- **脚本**: 小写下划线 `run_training.sh`

## 3. Python环境
```bash
conda activate minedojo  # Python 3.9+
export JAVA_OPTS="-Djava.awt.headless=true"  # 无头模式运行
```

## 4. Git提交规范
格式: `[类型] 简短描述`
- 类型: feat, fix, docs, refactor, test, chore
- 示例: `[feat] 添加PPO训练脚本`

## 5. 代码规范
- 遵循 PEP 8，每行100字符，4空格缩进
- 所有函数/类需文档字符串（Args, Returns, Raises）
- 导入顺序: 标准库 → 第三方库 → MineDojo → 本地模块
- 及时关闭资源: `env.close()` 或使用上下文管理器

## 6. 测试与调试
```bash
pytest tests/                          # 运行测试
python scripts/diagnose_minedojo.py    # 诊断工具
tail -f logs/<module>.log              # 查看日志
```

## 7. 重要提醒
- 日志超过100MB需分割，保留30天
- 敏感信息使用`.env`文件，加入`.gitignore`
- MineDojo环境必须及时关闭避免内存泄漏